import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import csv
from datetime import datetime
from parser import clean_old_entries, fetch_news
from dotenv import load_dotenv
import os
import time
import schedule
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –Ω–∞ DEBUG –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –ª–æ–≥–æ–≤
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = os.getenv("GROUP_ID")  # ID Telegram-–≥—Ä—É–ø–ø—ã, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ—Å—Ç–∏

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TOKEN or not GROUP_ID:
    logging.error("BOT_TOKEN –∏–ª–∏ GROUP_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ.")
    exit(1)
else:
    logging.info("BOT_TOKEN –∏ GROUP_ID —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

bot = telebot.TeleBot(TOKEN)

# CSV —Ñ–∞–π–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
csv_file = 'news.csv'
today_date = datetime.now().strftime('%Y-%m-%d')
sent_news_file = 'sent_news.txt'  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö data_key

# –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
if os.path.exists(sent_news_file):
    try:
        with open(sent_news_file, 'r', encoding='utf-8') as f:
            sent_news = set(line.strip() for line in f if line.strip())
        logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(sent_news)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {sent_news_file}: {e}")
        sent_news = set()
else:
    sent_news = set()
    logging.info("–§–∞–π–ª sent_news.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –≥—Ä—É–ø–ø—É
def publish_news():
    global sent_news

    logging.info("üîÑ –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π...")

    try:
        logging.debug("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π...")
        clean_old_entries()
        logging.info("üßπ –°—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –æ—á–∏—â–µ–Ω—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
        return

    try:
        logging.debug("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...")
        fetch_news()
        logging.info("üîç –ù–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return

    # –°—á–∏—Ç—ã–≤–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
    new_news = []
    try:
        with open(csv_file, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            for row in reader:
                logging.debug(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—å—é: {row['title']} ({row['parsed_date']})")
                if row['parsed_date'] == today_date and row['data_key'] not in sent_news:
                    new_news.append(row)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {csv_file}: {e}")
        return

    logging.info(f"–ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {len(new_news)}")

    if not new_news:
        logging.info("‚úÖ –ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø—É
    for news in new_news:
        translated_title = news['translated_title']
        summary = news['summary']
        post_url = news['post_url']

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ —Å—Ç–∞—Ç—å–∏
        markup = InlineKeyboardMarkup()
        webapp_button = InlineKeyboardButton(
            text="üîó –û—Ä–∏–≥–∏–Ω–∞–ª —Å—Ç–∞—Ç—å–∏",
            url=post_url
        )
        markup.add(webapp_button)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        message_text = f"üì∞ <b>{translated_title}</b>\n\n{summary}\n\n<a href='{post_url}'>–ß–∏—Ç–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª</a>"
        if len(message_text) > 4096:
            message_text = message_text[:4093] + "..."

        logging.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: {translated_title}")

        try:
            bot.send_message(
                GROUP_ID,
                message_text,
                parse_mode='HTML',
                disable_web_page_preview=False,
                reply_markup=markup
            )
            logging.info(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {translated_title}")
            sent_news.add(news['data_key'])  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        except telebot.apihelper.ApiException as api_err:
            logging.error(f"‚ùå API –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–∏ '{translated_title}': {api_err}")
        except Exception as e:
            logging.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–∏ '{translated_title}': {e}")

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        time.sleep(1)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    try:
        with open(sent_news_file, 'w', encoding='utf-8') as f:
            f.write("\n".join(sent_news))
        logging.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏: {len(sent_news)} –∑–∞–ø–∏—Å–µ–π.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {sent_news_file}: {e}")

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
schedule.every(10).minutes.do(publish_news)

if __name__ == "__main__":
    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    try:
        bot.send_message(GROUP_ID, "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π.")
        logging.info("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –í—ã–∑–æ–≤ publish_news() –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    logging.info("üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞ publish_news()...")
    publish_news()

    while True:
        schedule.run_pending()
        time.sleep(1)
